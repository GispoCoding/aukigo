{"version":3,"sources":["components/mapcomponent.tsx","services/getcapabilities.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["MapComponent","basemaps","props","mapContainerStyle","height","width","map","Map","target","undefined","controls","view","View","center","zoom","useEffect","setTarget","baseLayer","WMTS","parser","WMTSCapabilities","fetch","url","then","response","text","result","read","options","optionsFromCapabilities","layer","matrixSet","tile_matrix_set","addLayer","TileLayer","source","style","id","baseUrl","process","REACT_APP_SERVER","a","headers","Accept","redirect","request","json","data","Error","getCapabilities","App","useState","loading","setLoading","capabilities","setCapabilities","setBasemaps","setTilesets","tilesets","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kSA2DeA,MArCf,YAAyD,IAA1BC,EAAyB,EAAhCC,MAChBC,EAAoB,CAAEC,OAAQ,OAAQC,MAAO,QAE7CC,EAAM,IAAIC,IAAI,CAClBC,YAAQC,EACRC,SAAU,GACVC,KAAM,IAAIC,IAAK,CACbC,OAAQ,CAAC,eAAgB,gBACzBC,KAAM,OAsBV,OAlBAC,qBAAU,WACRT,EAAIU,UAAU,OACd,IAAMC,EAAYhB,EAASiB,KAAK,GAC1BC,EAAS,IAAIC,IACnBC,MAAMJ,EAAUK,KACbC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACL,IAAMC,EAASP,EAAOQ,KAAKF,GACrBG,EAAUC,YAAwBH,EAAQ,CAC9CI,MAAOb,EAAUa,MACjBC,UAAWd,EAAUe,kBAEvB1B,EAAI2B,SAAS,IAAIC,IAAU,CACzBC,OAAQ,IAAIjB,IAAKU,WAGtB,CAACtB,EAAKL,IAGP,yBAAKmC,MAAOjC,GACV,yBAAKkC,GAAG,MAAMD,MAAOjC,M,yBCtDrBmC,EAAUC,mHAAYC,iB,4CAgB5B,kCAAAC,EAAA,6DACQnB,EADR,UACiBgB,EADjB,qBAEQV,EAAU,CACdc,QAAS,CACPC,OAAQ,mBACRC,SAAU,WALhB,kBAS0BvB,MAAMC,EAAKM,GATrC,cASUiB,EATV,gBAUoCA,EAAQC,OAV5C,cAUUC,EAVV,yBAWWA,GAXX,wCAaU,IAAIC,MAAJ,MAbV,2D,sBAiBeC,M,2CCeAC,MA7Bf,WAAgB,IAAD,EACiBC,oBAAkB,GADnC,mBACNC,EADM,KACGC,EADH,OAE2BF,qBAF3B,mBAENG,EAFM,KAEQC,EAFR,OAGmBJ,qBAHnB,mBAGNlD,EAHM,KAGIuD,EAHJ,OAImBL,mBAAqB,IAJxC,mBAIIM,GAJJ,WAqBb,OAfA1C,qBAAU,WACRkC,IACG1B,MAAK,SAACC,GACL+B,EAAgB/B,GAChB6B,GAAW,QAEd,IAEHtC,qBAAU,WACHqC,IACHI,EAAYF,EAAcrD,UAC1BwD,EAAYH,EAAcI,aAE3B,CAACN,EAASE,IAERrD,EAEH,yBAAK0D,UAAU,OACb,kBAAC,EAAD,CAAczD,MAAOD,KAHH,4CC5BJ2D,QACW,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAACkD,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39c34243.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport WMTS, { optionsFromCapabilities } from 'ol/source/WMTS';\nimport WMTSCapabilities from 'ol/format/WMTSCapabilities';\n\ninterface WMTSLayer {\n  name: string,\n  attribution: string,\n  url: string,\n  layer: string,\n  tile_matrix_set: string\n}\n\ninterface MapBasemaps {\n  props: {\n    WMTS: WMTSLayer[],\n    VectorTile: []\n  }\n}\n\nfunction MapComponent({ props: basemaps }: MapBasemaps) {\n  const mapContainerStyle = { height: '100%', width: '100%' };\n\n  const map = new Map({\n    target: undefined,\n    controls: [],\n    view: new View({\n      center: [2478699.953232, 8501593.815476],\n      zoom: 14,\n    }),\n  });\n\n  useEffect(() => {\n    map.setTarget('map');\n    const baseLayer = basemaps.WMTS[0];\n    const parser = new WMTSCapabilities();\n    fetch(baseLayer.url)\n      .then((response) => response.text())\n      .then((text) => {\n        const result = parser.read(text);\n        const options = optionsFromCapabilities(result, {\n          layer: baseLayer.layer,\n          matrixSet: baseLayer.tile_matrix_set,\n        });\n        map.addLayer(new TileLayer({\n          source: new WMTS(options),\n        }));\n      });\n  }, [map, basemaps]);\n\n  return (\n    <div style={mapContainerStyle}>\n      <div id=\"map\" style={mapContainerStyle} />\n    </div>\n  );\n}\n\nexport default MapComponent;\n","const baseUrl = process.env.REACT_APP_SERVER;\n\ninterface Basemaps {\n  WMTS: [],\n  VectorTile: []\n}\n\ninterface Tilesets {\n  Tileset: []\n}\n\ninterface Capabilities {\n  basemaps: Basemaps,\n  tilesets: Tilesets[],\n}\n\nasync function getCapabilities(): Promise<Capabilities> {\n  const url = `${baseUrl}/api/capabilities`;\n  const options = {\n    headers: {\n      Accept: 'application/json',\n      redirect: 'follow',\n    },\n  };\n  try {\n    const request = await fetch(url, options);\n    const data:Capabilities = await request.json();\n    return data;\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nexport default getCapabilities;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport MapComponent from './components/mapcomponent';\nimport getCapabilities from './services/getcapabilities';\n\ninterface Basemaps {\n  WMTS: [],\n  VectorTile: []\n}\n\ninterface Tilesets {\n  Tileset: []\n}\n\ninterface Capabilities {\n  basemaps: Basemaps,\n  tilesets: Tilesets[],\n}\n\nfunction App() {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [capabilities, setCapabilities] = useState<Capabilities>();\n  const [basemaps, setBasemaps] = useState<Basemaps>();\n  const [tilesets, setTilesets] = useState<Tilesets[]>([]); // eslint-disable-line\n\n  useEffect(() => {\n    getCapabilities()\n      .then((response) => {\n        setCapabilities(response);\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (!loading) {\n      setBasemaps(capabilities!.basemaps);\n      setTilesets(capabilities!.tilesets);\n    }\n  }, [loading, capabilities]);\n\n  if (!basemaps) return <div>Loading...</div>;\n  return (\n    <div className=\"App\">\n      <MapComponent props={basemaps} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n  // [::1] is the IPv6 localhost address.\n  || window.location.hostname === '[::1]'\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}